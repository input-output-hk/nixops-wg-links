{ config, lib, uuid, name, ... }:
with lib; {
  options = {
    name = mkOption {
      default = "charon-${uuid}-${name}";
      type = types.str;
      description = "Name of the wireguard keypair.";
    };

    enable = mkOption {
      type = types.bool;
      default = true;
      description = "Whether to enable the wireguard keypair for use or not.";
    };

    dns = mkOption {
      type = types.listOf types.str;
      example = [ "machine1-wg" ];
      default = [ ];
      description = ''
        A list of IP addresses of DNS servers to be configured on the wireguard interface.
        Opening additional firewall ports and networking configuration may required.
        For details, see: https://nixos.wiki/wiki/Wireguard for the wg-quick service.

        If if any string element matches the name of a wireguard keypair resource name,
        the wireguard IP matching that resource will be substituted.
      '';
    };

    mtu = mkOption {
      type = types.nullOr (types.addCheck types.int (x: x >= 1));
      default = null;
      description = ''
        The MTU, specified in bytes.  If null, the MTU is automatically determined
        from the endpoint addresses or the system default route, which is usually a sane choice.
        However, to manually specify an MTU to override this automatic discovery,
        this value may be specified explicitly.
      '';
    };

    listenPort = mkOption {
      type = types.addCheck types.int (x: x >= 1 && x <= 65535);
      default = 51820;
      description =
        "The default udp port for this wireguard keyPair to listen on.";
    };

    persistentKeepalive = mkOption {
      type = types.nullOr (types.addCheck types.int (x: x >= 0 && x <= 65535));
      default = 25;
      description = ''
        The persistent keepalive to use, in seconds.  See wireguard documentation.
        If this value is outside of 1 - 65535 or null, persistent keepalive will be disabled.
      '';
    };

    usePresharedKey = mkOption {
      type = types.bool;
      default = true;
      description = ''
        Whether to use a preshared wireguard key for link.
        The preshared key will be autogenerated randomly per nixops deployment.
      '';
    };

    syncState = mkOption {
      type = types.bool;
      default = false;
      description = ''
        Whether to sync the wireguard key state from nixops state to machine.
        This will add some ssh overhead, but will fix any missing or inconsistent wireguard
        keypair state on deployment machines.  Use of this option will also force a
        restart of the wireguard systemd service to use the syncronized state keys.
      '';
    };

    interfaceName = mkOption {
      type = types.str;
      default = "nixops-wg0";
      description =
        "The default wireguard interface name that will be used for configuration.";
    };

    table = mkOption {
      type = types.nullOr types.str;
      default = null;
      description = ''
        The kernel routing table to add this interface's associated routes to.
        Setting this is useful for e.g. policy routing ("ip rule") or virtual routing
        and forwarding ("ip vrf"). Both numeric table IDs and table names (/etc/rt_tables)
        can be used. Defaults to "main" when specified as null.
      '';
    };

    preUp = mkOption {
      example = literalExample ''
        ${pkgs.iproute}/bin/ip netns add foo
      '';
      default = "";
      type = with types; coercedTo (listOf str) (concatStringsSep "\n") lines;
      description = ''
        Commands called at the start of the interface setup.
      '';
    };

    preDown = mkOption {
      example = literalExample ''
        ${pkgs.iproute}/bin/ip netns del foo
      '';
      default = "";
      type = with types; coercedTo (listOf str) (concatStringsSep "\n") lines;
      description = ''
        Command called before the interface is taken down.
      '';
    };

    postUp = mkOption {
      example = literalExample ''
        ${pkgs.iproute}/bin/ip netns add foo
      '';
      default = "";
      type = with types; coercedTo (listOf str) (concatStringsSep "\n") lines;
      description = ''
        Commands called after the interface setup.
      '';
    };

    postDown = mkOption {
      example = literalExample ''
        ${pkgs.iproute}/bin/ip netns del foo
      '';
      default = "";
      type = with types; coercedTo (listOf str) (concatStringsSep "\n") lines;
      description = ''
        Command called after the interface is taken down.
      '';
    };

    baseIpv4 = mkOption {
      default = {
        a = 10;
        b = 0;
        c = 0;
        d = 1;
      };
      type = with types;
        addCheck (attrsOf int) (x:
          x ? a && x ? b && x ? c && x ? d && __length (__attrNames x) == 4
          && x.a >= 0 && x.a <= 255 && x.b >= 0 && x.b <= 255 && x.c >= 0 && x.c
          <= 255 && x.d >= 0 && x.d <= 255);
      description = ''
        The base address used to generate wireguard IPv4 assignments.
        The machine associated with the wireguard link resource will have it's index
        added to the base IPv4 to determine its unique wireguard IPv4 assignment.
        Valid IPv4 format and private IPv4 address class for both the base address
        and the generated wireguard IPv4 assignments will be validated within the plugin.

        To avoid potential wireguard IPv4 address collisions, it is recommended to use a
        single baseIpv4 per deployment.

        Wireguard addresses are created as peer-to-peer links with a 32 bit subnet mask.

        The default baseIpv4 is 10.0.0.1 and not 10.0.0.0 to avoid broadcast warnings on ping.
      '';
    };

    addNoWgHosts = mkOption {
      default = true;
      type = types.bool;
      description = ''
        Adds a hosts entry for each resource's non-wireguarded publicIpv4 in the cluster
        with a suffix of "-nowg" appended.
      '';
    };
  };
  config._type = "wg-keypair";
}
